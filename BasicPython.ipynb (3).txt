{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "1. What is python, and why is it popular?"
      ],
      "metadata": {
        "id": "3cNpva9Y6BTa"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Python is a high level programming language. It is created by Guido Van Rossum in 1991. They are popular for its simplicity, readability and versitality."
      ],
      "metadata": {
        "id": "UxUsVuK4C2wv"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "2. What is an interpreter on python?"
      ],
      "metadata": {
        "id": "a89B-GZHD7S-"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "An interpreter interprets high level language.An interpreter executes Python code line-by-line."
      ],
      "metadata": {
        "id": "3vocjXcqEI-o"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "3. What are pre-defined keywords in python?"
      ],
      "metadata": {
        "id": "8yIS0-mxEeBA"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "These are reserved words that have special meaning, like print, if, for, while, def, True, False."
      ],
      "metadata": {
        "id": "tOnDPnr0Eq9m"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "4. Can keywords be used as variable names?"
      ],
      "metadata": {
        "id": "WqG-vAC9FpG-"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "No, Python keywords cannot be used as variable names."
      ],
      "metadata": {
        "id": "pSb70SQpF4-y"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "5. What is mutability in python?"
      ],
      "metadata": {
        "id": "JUobn0_qF5xy"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "It refers to whether an object can be changed after creation."
      ],
      "metadata": {
        "id": "kpvZf9aDF_5B"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "6. Why are lists mutable, but tuples are immutable?"
      ],
      "metadata": {
        "id": "hDFngTSMGBhg"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Lists allow modifications like append, remove, etc., Hence it is mutable. while tuples are fixed and don't allow element changes after creation. Hence tuples is immutable."
      ],
      "metadata": {
        "id": "OD62kUErGKa2"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "7. What is the difference between \"==\" and \"is\" operators in python?"
      ],
      "metadata": {
        "id": "gzRxlmVKGNDf"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "'==' checks value equality\n",
        "\n",
        "'is' checks object identity"
      ],
      "metadata": {
        "id": "pf4FH5JFGZRv"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "8. What are logical operators in python?"
      ],
      "metadata": {
        "id": "c5XNkPjtGZ8l"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "Example: and, or, not"
      ],
      "metadata": {
        "id": "8TA6dbBAGhdW"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "9. What is type casting in python?"
      ],
      "metadata": {
        "id": "g6yzGyG_Giy7"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Converting one data type to another."
      ],
      "metadata": {
        "id": "_bDwOE0vGpJP"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "10. What is the difference between implicit and explicit type casting?"
      ],
      "metadata": {
        "id": "_MXOJlwVGp3j"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Implicit: Done automatically by Python (int + float = float)\n",
        "\n",
        "Explicit: Done manually by the programmer using functions like int(), float()"
      ],
      "metadata": {
        "id": "tQPspgm_G1Wf"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "11. What is the purpose of conditional statement in python?"
      ],
      "metadata": {
        "id": "A9HFocqMG2Ix"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "To make decisions in code using if, elif, else."
      ],
      "metadata": {
        "id": "muZN-lkxHAAV"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "12. How does the elif statement work?"
      ],
      "metadata": {
        "id": "59SJoTTtHAod"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "The elif statement in Python stands for \"else if\", and it is used to check multiple conditions after an initial if statement."
      ],
      "metadata": {
        "id": "6lZQyVLxHIZd"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "13. what is the difference between for and while loops?"
      ],
      "metadata": {
        "id": "qeS1p0ySHJs3"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "The main difference between a for loop and a while loop in Python lies in how and when they iterate:\n",
        "\n",
        "for: Used when you know how many times you want to loop.\n",
        "\n",
        "while: Used when condition needs to be checked repeatedly until it becomes False."
      ],
      "metadata": {
        "id": "BmXLvxsjHRht"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "14. Describe a scenerio where a while loop is more suitable than a for loop."
      ],
      "metadata": {
        "id": "V48KD9HLHSVM"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        " A while loop is more suitable than a for loop in Python when you don't know in advance how many times the loop needs to run â€” that is, when the loop should continue until a certain condition is met.i.e.,When the number of iterations is not known in advance, e.g., reading input until user types \"exit\"."
      ],
      "metadata": {
        "id": "_MjfSByZJrk9"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Practical Questions**\n",
        "\n",
        "1. Write a python program to print \"Hello, World!\""
      ],
      "metadata": {
        "id": "BmnkN6qLJ8Mq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print ('\"Hello, World!\"')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KE_WWXl3JyfX",
        "outputId": "2db9de8c-c447-443e-fec3-64ac83e8ab6c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\"Hello, World!\"\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2. Write a python program that display your name and age."
      ],
      "metadata": {
        "id": "Ru9nMgelJ66w"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "name = \"Ashmi\"\n",
        "age = 23\n",
        "print (f\"My Name is {name} and My Age is {age}.\")"
      ],
      "metadata": {
        "id": "0kAHWLd1K_Ey",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9dcb4d10-1fa2-4ab2-cdd0-1051842ab454"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "My Name is Ashmi and My Age is 23.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "3. Write code to print all the pre-defined keywords in python using the keyword library."
      ],
      "metadata": {
        "id": "YmPHZEcsLGm0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "help('keywords')"
      ],
      "metadata": {
        "id": "OQIzcS6PLIA2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2da1c60f-5db7-4fbb-f412-8e19b45c2e7d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Here is a list of the Python keywords.  Enter any keyword to get more help.\n",
            "\n",
            "False               class               from                or\n",
            "None                continue            global              pass\n",
            "True                def                 if                  raise\n",
            "and                 del                 import              return\n",
            "as                  elif                in                  try\n",
            "assert              else                is                  while\n",
            "async               except              lambda              with\n",
            "await               finally             nonlocal            yield\n",
            "break               for                 not                 \n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "4. Write a program that checks if a given word is a Python keyword."
      ],
      "metadata": {
        "id": "rC3BOlvJLc5v"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import keyword\n",
        "s = 'for'\n",
        "if keyword.iskeyword(s):\n",
        "    print(f\"'{s}' is a Python keyword.\")\n",
        "else:\n",
        "    print(f\"'{s}' is not a Python keyword.\")"
      ],
      "metadata": {
        "id": "kY07CYTkmttI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b2388a83-2002-440b-cb07-caac62c9573a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "'for' is a Python keyword.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "5. Create a list and tuple in Python, and demonstrate how attempting to change an element works differently\n",
        "for each."
      ],
      "metadata": {
        "id": "rqWIibhqm86j"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Create a list\n",
        "my_list = [10, 20, 30]\n",
        "print(\"Original List:\", my_list)\n",
        "\n",
        "# Modify an element in the list\n",
        "my_list[1] = 200\n",
        "print(\"Modified List:\", my_list)\n",
        "\n",
        "\n",
        "# Create a tuple\n",
        "my_tuple = (10, 20, 30)\n",
        "print(\"\\nOriginal Tuple:\", my_tuple)\n",
        "\n",
        "# Try to modify an element in the tuple\n",
        "try:\n",
        "    my_tuple[1] = 200\n",
        "except TypeError as e:\n",
        "    print(\"Error when trying to modify tuple:\", e)"
      ],
      "metadata": {
        "id": "3JonAh-inAPj",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "703498f9-1813-4e33-e93e-8468cc661dbf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Original List: [10, 20, 30]\n",
            "Modified List: [10, 200, 30]\n",
            "\n",
            "Original Tuple: (10, 20, 30)\n",
            "Error when trying to modify tuple: 'tuple' object does not support item assignment\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "6. Write a function to demonstrate the behavior of mutable and immutable argument."
      ],
      "metadata": {
        "id": "T0VRoKvrnBCr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Immutable argument example (integer)\n",
        "def modify_number(n):\n",
        "    n += 10\n",
        "    print(\"Inside function (immutable):\", n)\n",
        "\n",
        "# Mutable argument example (list)\n",
        "def modify_list(lst):\n",
        "    lst.append(100)\n",
        "    print(\"Inside function (mutable):\", lst)\n",
        "\n",
        "# Immutable: int\n",
        "x = 5\n",
        "print(\"Before function call (immutable):\", x)\n",
        "modify_number(x)\n",
        "print(\"After function call (immutable):\", x)\n",
        "\n",
        "print()\n",
        "\n",
        "# Mutable: list\n",
        "my_list = [1, 2, 3]\n",
        "print(\"Before function call (mutable):\", my_list)\n",
        "modify_list(my_list)\n",
        "print(\"After function call (mutable):\", my_list)"
      ],
      "metadata": {
        "id": "ruLR2ApDnImn",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "46faab6b-9be7-46ca-bf8d-c9790fce69b0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Before function call (immutable): 5\n",
            "Inside function (immutable): 15\n",
            "After function call (immutable): 5\n",
            "\n",
            "Before function call (mutable): [1, 2, 3]\n",
            "Inside function (mutable): [1, 2, 3, 100]\n",
            "After function call (mutable): [1, 2, 3, 100]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "7. Write a program that performs basic arithmetic operations on two user-input numbers."
      ],
      "metadata": {
        "id": "Qs1ItyYgnJC_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Take two numbers from the user\n",
        "num1 = float(input(\"Enter first number: \"))\n",
        "num2 = float(input(\"Enter second number: \"))\n",
        "\n",
        "# Perform arithmetic operations\n",
        "print(\"Addition:\", num1 + num2)\n",
        "print(\"Subtraction:\", num1 - num2)\n",
        "print(\"Multiplication:\", num1 * num2)\n",
        "\n",
        "# Avoid division by zero\n",
        "if num2 != 0:\n",
        "    print(\"Division:\", num1 / num2)\n",
        "    print(\"Modulus:\", num1 % num2)\n",
        "else:\n",
        "    print(\"Division and Modulus not possible (division by zero).\")"
      ],
      "metadata": {
        "id": "C3hr9-o_nOuA",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "74117973-de0b-4a24-a35d-d883f897172f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter first number: 10\n",
            "Enter second number: 34\n",
            "Addition: 44.0\n",
            "Subtraction: -24.0\n",
            "Multiplication: 340.0\n",
            "Division: 0.29411764705882354\n",
            "Modulus: 10.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "8. Write a program to demonstrate the use of logical operators."
      ],
      "metadata": {
        "id": "lt3flSHKnPJk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Take two numbers from the user\n",
        "a = int(input(\"Enter first number: \"))\n",
        "b = int(input(\"Enter second number: \"))\n",
        "\n",
        "# Logical operations\n",
        "print(\"Both numbers are greater than 0:\", a > 0 and b > 0)\n",
        "print(\"At least one number is positive:\", a > 0 or b > 0)\n",
        "print(\"Not a positive number (a):\", not (a > 0))"
      ],
      "metadata": {
        "id": "cjF7spzhnTQD",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9a8f6ed5-1927-43b2-c454-f1492346b28e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter first number: 10\n",
            "Enter second number: 3\n",
            "Both numbers are greater than 0: True\n",
            "At least one number is positive: True\n",
            "Not a positive number (a): False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "9. Write a Python program to convert user input from string to integer, float, and boolean types."
      ],
      "metadata": {
        "id": "ULgxWvrtnUEx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Get input from the user\n",
        "user_input = input(\"Enter a value: \")\n",
        "\n",
        "# Convert to integer\n",
        "try:\n",
        "    int_value = int(user_input)\n",
        "    print(\"Integer value:\", int_value)\n",
        "except ValueError:\n",
        "    print(\"Cannot convert to integer.\")\n",
        "\n",
        "# Convert to float\n",
        "try:\n",
        "    float_value = float(user_input)\n",
        "    print(\"Float value:\", float_value)\n",
        "except ValueError:\n",
        "    print(\"Cannot convert to float.\")\n",
        "\n",
        "# Convert to boolean\n",
        "# Any non-empty string except \"False\", \"0\", or \"false\" will be True\n",
        "bool_value = bool(user_input.strip()) and user_input.strip().lower() not in ['false', '0']\n",
        "print(\"Boolean value:\", bool_value)"
      ],
      "metadata": {
        "id": "lETktbR0neaG",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "74ff354a-1136-4607-8ac0-3abcd3b24b29"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a value: Ten\n",
            "Cannot convert to integer.\n",
            "Cannot convert to float.\n",
            "Boolean value: True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "10. Write code to demonstrate type casting with list elements."
      ],
      "metadata": {
        "id": "RlKZVA8ynfOA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Original list with string numbers\n",
        "string_list = ['10', '20', '30', '40']\n",
        "\n",
        "# Convert string elements to integers using type casting\n",
        "int_list = []\n",
        "for item in string_list:\n",
        "    int_list.append(int(item))\n",
        "\n",
        "# Display results\n",
        "print(\"Original list (strings):\", string_list)\n",
        "print(\"Converted list (integers):\", int_list)"
      ],
      "metadata": {
        "id": "9wPtyzR8nkG7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "80036a5f-99f3-4265-87c1-85307206e0fa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Original list (strings): ['10', '20', '30', '40']\n",
            "Converted list (integers): [10, 20, 30, 40]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "11. Write a program that checks if a number is positive, negative, or zero."
      ],
      "metadata": {
        "id": "-u2znOsXnkYs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Get input from the user\n",
        "num = float(input(\"Enter a number: \"))\n",
        "\n",
        "# Check the condition\n",
        "if num > 0:\n",
        "    print(\"The number is positive.\")\n",
        "elif num < 0:\n",
        "    print(\"The number is negative.\")\n",
        "else:\n",
        "    print(\"The number is zero.\")"
      ],
      "metadata": {
        "id": "fUGDQm8Xnnrc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "27f51a75-0ac9-4c60-8b56-7c2eed89c047"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a number: -23\n",
            "The number is negative.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "12. Write a for loop to print numbers from 1 to 10."
      ],
      "metadata": {
        "id": "Rvqg821tnn7P"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Using for loop to print numbers from 1 to 10\n",
        "for i in range(1, 11):\n",
        "    print(i)"
      ],
      "metadata": {
        "id": "4CmLlcG7nrmf",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ce1ec5a8-273c-4b1b-c0c8-8e013c9670b9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n",
            "2\n",
            "3\n",
            "4\n",
            "5\n",
            "6\n",
            "7\n",
            "8\n",
            "9\n",
            "10\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "13. Write a Python program to find the sum of all even numbers between 1 and 50."
      ],
      "metadata": {
        "id": "eFNI2VT2nrx0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Initialize variables\n",
        "sum_even = 0\n",
        "number = 1\n",
        "\n",
        "# Use while loop to check even numbers from 1 to 50\n",
        "while number <= 50:\n",
        "    if number % 2 == 0:\n",
        "        sum_even += number\n",
        "    number += 1\n",
        "\n",
        "# Display the result\n",
        "print(\"Sum of all even numbers between 1 and 50 is:\", sum_even)"
      ],
      "metadata": {
        "id": "xoK01-uKnu3h",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4c347744-b24a-4b60-ba78-6d88b87f5462"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sum of all even numbers between 1 and 50 is: 650\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "14. Write a program to reverse a string using a while loop."
      ],
      "metadata": {
        "id": "SQfrHURynvUF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Get input from the user\n",
        "text = input(\"Enter a string to reverse: \")\n",
        "\n",
        "# Initialize variables\n",
        "reversed_text = \"\"\n",
        "index = len(text) - 1\n",
        "\n",
        "# Use while loop to reverse the string\n",
        "while index >= 0:\n",
        "    reversed_text += text[index]\n",
        "    index -= 1\n",
        "\n",
        "# Print the reversed string\n",
        "print(\"Reversed string:\", reversed_text)"
      ],
      "metadata": {
        "id": "DcG4iCtInyec",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "63a9de1c-b3f0-42bf-f3d8-11f141842c59"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a string to reverse: Hindi\n",
            "Reversed string: idniH\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "15. Write a Python program to calculate the factorial of a number provided by the user using a while loop."
      ],
      "metadata": {
        "id": "JPM7WVnxnytx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Get input from the user\n",
        "num = int(input(\"Enter a non-negative integer: \"))\n",
        "\n",
        "# Check if the number is negative\n",
        "if num < 0:\n",
        "    print(\"Factorial is not defined for negative numbers.\")\n",
        "else:\n",
        "    factorial = 1\n",
        "    i = 1\n",
        "    while i <= num:\n",
        "        factorial *= i\n",
        "        i += 1\n",
        "    print(f\"The factorial of {num} is {factorial}\")"
      ],
      "metadata": {
        "id": "RKMb9Brtn4LD",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3166930f-b84e-4c69-c642-43b31c2e2817"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a non-negative integer: 23\n",
            "The factorial of 23 is 25852016738884976640000\n"
          ]
        }
      ]
    }
  ]
}